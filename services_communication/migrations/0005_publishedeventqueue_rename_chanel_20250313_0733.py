# Generated by Django 4.2.17 on 2025-03-13 07:33

from django.db import migrations, router


def rename_chanel(apps, schema_editor):
    PublishedEventQueue = apps.get_model("services_communication", "PublishedEventQueue")
    if not router.allow_migrate_model(schema_editor.connection.alias, PublishedEventQueue):
        return

    if schema_editor.connection.vendor != 'postgresql':
        return

    schema_editor.execute(f"""
        DROP TRIGGER notify_new_published_event_trigger
        ON {PublishedEventQueue._meta.db_table};
    """)

    schema_editor.execute(f"""
        DROP FUNCTION notify_insert_row;
    """)


    schema_editor.execute("""
        CREATE OR REPLACE FUNCTION notify_event_queued() RETURNS TRIGGER AS $$
        BEGIN
            PERFORM pg_notify(TG_TABLE_SCHEMA::text || '_eventqueued', null);
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    schema_editor.execute(f"""
        CREATE TRIGGER notify_event_queued_trigger
        AFTER INSERT ON {PublishedEventQueue._meta.db_table}
        FOR EACH ROW EXECUTE FUNCTION notify_event_queued();
    """)



class Migration(migrations.Migration):

    dependencies = [
        ('services_communication', '0004_publishedeventqueue_add_trigger'),
    ]

    operations = [
        migrations.RunPython(rename_chanel),
    ]
